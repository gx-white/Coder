题目描述：
输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。

思路：
1. 暴力 -- 开辟新的空间
运行时间：24ms
占用内存：5864k

2. 也是自己想的（看了一下题解，我这种方法竟然是一种正解？？厉害了）
递归，一直找，找到右边是偶数，就将长度缩短
右边是奇数，那就统计最右边的偶数到最右边直接的奇数的个数，然后将这之间的奇数依次左移，最右边偶数换到最右边，然后长度减1，接着递归
要注意空数组以及数组长度为1的情况

但是这样做感觉并没有优化，反而感觉理解起来更复杂了
运行时间：25ms
占用内存：5724k

这种方法应该是类似于快速排序算法（感觉自己🐂🍺）
还可以冒泡排序思路，让偶数不断地换到右边
思路描述：
输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。

思路描述：
因为二叉搜索树满足  左 < 中 < 右  的特点，就按照这个顺序来逐渐改
就是在中序遍历的基础上改一下节点指向？
以 左-中-右 做为一个小的结构，每次返回右，递归（没有右就返回中，没有中就返回左，左也没有就返回？）

我的思路：（不敢相信，我这个糊里糊涂的代码竟然通过了...）
递归函数范围head, tail，分别代码递归的子树部分形成的子链的头和尾
“递归公式”为 如果是向左子树递归，那返回的tail.right=root，root.left=tail
           如果是向右子树递归，那返回的head.left=root, root.right=head(head需要保存为head_temp，否则会把真正的head给覆盖)
           head代表的是当前子结构的头
           而返回之后，上一层子结构的头不应该被改变，如果不保存为head_temp的话，就会覆盖掉最最左端的头，从而出错。右子树同样道理

结束条件就是当前结构为最小结构，直接拼接处链表，返回head,tail即可。
（思路最开始就是这样，但是乱糟糟的，写代码绕了很长时间）


评论里递归版好像跟我的思路差不多？（果然大家也在说好绕😂😂）

